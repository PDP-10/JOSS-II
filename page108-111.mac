^L
;	PG. 108 - SELECT AN IN CORE USER FOR INTERPRETATION
	
	SUBTTL SELECT AN IN CORE USER FOR INTERPRETATION
	
			;PROCESS AN "ON" USER
		
	SI7:	MOVE I	D,0
			SKIPN	CORE(D)
			JRST	SI8;				NOPE
			AOS		D
			CAML	D,N.C;				HAVE WE SEARCHED ALL
			JRST	SI13.5;				YES, THERE ARE NONE AVAILABLE
			JRST	SI7+1;				NO, GO FOR NEXT
			
	SI8:	MOVE	A,CORE(D)
			TLO		A,400000;			SET "IN USE BIT"
			MOVEM	A,CORE(D)
			MOVE	B,D
			DPB		S,S.UR;				SET USER # IN CORE BLOCK
			ADDI	D,BLOCK;			COMPUTE RELOCATION	
			DPB		D,S.COR;			AND SET IN STATUS WORD
			AOS		CT39;				COUNT IN-CORE USERS
			
^L
;PG. 109 INITIALIZE FOR INTERPRETATION
		
	SUBTTL INITIALIZE FOR INTERPRETATION
	
	,		ON ENTRY F CONTAINS STATE, S THE SELECTED USER, AND
	,		D HIS CORE LOCATION
	
	INTINT:			SUBI	D,BBLOCK
				MOVE	D,CORE(D)
				TLNE	D,200000
				JRST	SI3.5;			NO GO - DRUM IS USING
				SKIPL	S
				CAILE	S,N.S;			S MUST BE 0 <=S <= N.S
	H1:			HALT	1;				BAD USER NUMBER
				MOVE	G,T.10.(F);		GET ACTION TABLE ENTRY
				TLNN	G.BUFBIT;		SKIP IF HE NEEDS A BUFFER
				JRST	INT2
				TSX		GETBUF
				JRST	SI.3;			GET HIM LATER IF NONE AVAILABLE
				MOVE	A,E;			SAVE THE BUFFER POINTER
	INT2:			TSX		SRR;			SET REALLOCATION REGISTER
				TLNE	G,ONBIT;		SKIP IF NOT ON TAPE
				JRST	INT3;			NO TEST IF TURNING ON
				MOVE	B,INITIALS
				CAME	B,MINT(S);		COMPARE INITIALS - CORE COPY
				JRST	KILL1;			THEY DIFFER - BAD USER BLOCK DATA
	INT3:			TLNE	G,INBIT;		SKIP IF NO INTERRUPT SIGNAL
				AOS	RISIG;			SET IN REQUEST
				LDB	S,INBIT;		SKIP IF NO INTERRUPT SIGNAL
				AOS	RISIG;			SET IN REQUEST
				LDB	B,S.INR
				ORM	B,RISIG;		INTERRUPT SIGNAL TO USER BLOCK
				SETZM	B
				DPB	B,S.INR;		RESET INTERRUPT FLAG
				LDB	B,S.DU;			
				SKIPE	B
				SETOM	SPARE4;			TELL JOE HE HAS THE DISC
				TLNN	G,RCBIT;		SKIP IF CARRIER RETURN
				JRST	INT1
				HRRZ	A,S.BUF(S);		GET BUFFER POINTER
				SETZM 	B
				DPB	B,S.INR;		RESET INTERRUPT FLAG
				LDB	B,S.DU
				SKIPE	B
				SETOM	SPARE4;			TELL JOE HE HAS THE DISC
				TLNN	G,RCBIT;		SKIP IF CARRIER RETURN
				JRST	INT1
				HRRZ	A,S.BUF(S);		GET BUFFER POINTER
				SETZM	S.BUF(S);		UNLINK FROM USER,
			INT1:	CHS	CU.S;			SET AS CURRENT USER AND
				MOVE	E,A;			BUFFER POINTER TO COMMUNICATION REG
				LDB	B,S.TM
				MOVEM	B,T.CU;			SET CORRECT TIME IN SHOT
				MOVEI	B,0
				
			KILL1:	MOVEM	S.CUI;			PLANT USER #
				MOVEI	A,73
				JRST	KILL;			KILL
^L
;PG.110 - JOSS LOG-ON PROCESSOR

			SUBTTL	JOSS LOG-ON PROCESSOR

			BJ:	JRST	.+1
				MOVE	D,[POINT 6,CT48A]
				ILDB	B,D;		
				ADDI	B,1
				DPB	B,D;			COUNT IN BLOCK SIZE DISTRIBUTION
				MOVEI	B,NEXT
				MOVEM	B,INTENT		;INITIALIZE ENTRY
				MOVE	C,CUI
				MOVE	B,[ASCII /???  /]
				MOVEM	B,MINT(C);		INITIALIZE USER INITIALS
				MOVEM	B,INITIALS
				MOVE	B,BLANKS
				MOVEM	B,JOBNO
				SETZM	COMTIM
				SETZM	SPARE1;			ZERO BINARY JOB NUMBER
				SETZM	SPARE2;			ZERO DEPT NUMBER
				SETZM	SPARE3;			CHARGE UNITS
				EXCH	PP,PPSAV
				SETZM	SEQ;			INITIALIZE SEQUENCE
				TSX	ISEC
				MOVEM	B,ONTIME;		SET USERS ON TIME
				MOVE	S,CUI
				HRLZM	B,USTAT(S);		SIMULATE FIRST GREEN TIME
				MOVEI	B,1;			GO FOR A BUFFER
				JRST	BJLEV

		BJ1:		SEND 	BJM1;			"JOSS HERE ... INITIALS PLEASE"
				AOS 	SEQ;			INCREMENT SEQUENCER					
				JRST	BJSU

		BJ2:		TSX	BJA1;			GO TO APPROVE INITIALS
				JRST	BJ2.1;			NO GOOD
				SEND	BJM2;			GOOD - "JOB # PLEASE"
				AOS	SEQ;			INCREMENT SEQUENCER
				JRST	BJSU

		BJ2.1:		SEND	BJM3;			"INITIALS AGAIN"
				JRST	BJSU
^L
;PG. 111- JOSS LOG-ON PROCESSOR
		
		BJ3:		TSX	BJA5;			GO TO APPROVE #
				JRST	BJ3.2;			NO GOOD
				AOS	SEQ		
		BJ3.1:		AOS	SEQ;			GOOD - INCREMENT SEQUENCER
				CALL	A,^D1000;		SKIP IF NOT AN RPN
				JRST	BJ6;			YES, GO TO DEPARTMENT
		BJ3.3:		MOVEI	B,2;			RETURN BUFFER
				JRST	BJLEV;			RETURN WILL BE TO INTERP. FIRST ENTRY
	
		BJ3.2:		SEND	BJM4;			"JOB # AGAIN"
				AOS	SEQ
				JRST	BJSU

		BJ4:		TSX	BJA5;			GO TO APPROVE JOB #
				JRST	.+2
				JRST	BJ3.1;			JOB # OK
				SEND	BJM5;			"ARE YOU PLAYING?"			
		BJSU:		MOVEI	B,4
		BJLEV:		EXCH	PP,PPSAV
				JRST	MONENT			GO TO MONITOR

		NEXT:		HRRZ	B,SEQ;			GET THE SEQUENCER
				EXCH	PP,PPSAV
				JRST	@BJSW(B);		DISPATCH TO PROPER SEQUENCE
		BJSW:		XWD	0,BJ1
				XWD	0,BJ2
				XWD	0,BJ3
				XWD	0,BJ4
				XWD	0,BJ5
				XWD	0,BJ7
				XWD	0,BJ9
